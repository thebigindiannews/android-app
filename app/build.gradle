apply plugin: "com.android.application"
apply plugin: "android-apt"

// Helper function to get the secret keys from the 'secrets.properties' file
def getSecret(keyname) {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File("secrets.properties")))
    return "\"" + props[keyname] + "\""
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.enamakel.thebigindiannews"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 49
        versionName "1.0.0"

        buildConfigField "String", "API_KEY", getSecret("API_KEY")
        buildConfigField "String", "GITHUB_TOKEN", getSecret("GITHUB_KEY")
        buildConfigField "String", "READABILITY_TOKEN", getSecret("READABILITY_KEY")
    }

    buildTypes {
        leak.initWith(buildTypes.debug)
        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            zipAlignEnabled true
        }
    }

    lintOptions {
        htmlReport false
        xmlReport false
        textReport true
        warningsAsErrors true
        abortOnError true
        informational "Overdraw" // http://b.android.com/169879
        explainIssues false
        absolutePaths false
    }
}


ext {
    AAVersion = "3.3.2"
    autoParcelVersion = "0.1"
    daggerVersion = "1.2.2"
    googleAnalyticsVersion = "8.3.0"
    leakCanaryVersion = "1.3.1"
    lombokVersion = "1.16.6"
    okHttpVersion = "3.0.0-RC1"
    picassoVersion = "2.5.2"
    retrofit2Version = "2.0.0-beta3"
    retrofitVersion = "2.0.0-beta2"
    supportVersion = "23.1.1"
}


apt {
    arguments {
        androidManifestFile variant.outputs[0]?.processResources?.manifestFile
        // if you have multiple outputs (when using splits), you may want to have other index than 0

        // you should set your package name here if you are using different application IDs
        // resourcePackageName "your.package.name"

        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:customtabs:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:preference-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"

    // Leakcanary. A memory leak detection library for Android and Java.
    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    leakCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Retrofit 2 & OkHttp
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    compile "com.squareup.okhttp3:okhttp:$okHttpVersion"
    compile("com.squareup.retrofit2:retrofit:$retrofit2Version") {
        // exclude Retrofitâ€™s OkHttp peer-dependency module and define your own module import
        exclude module: 'okhttp'
    }
    compile "com.squareup.retrofit2:converter-gson:$retrofit2Version"

    // Retrofit 1 for fallback methods.
    compile "com.squareup.retrofit:retrofit:$retrofitVersion"

    // Dagger, A fast dependency injector for Android and Java
    compile "com.squareup.dagger:dagger:$daggerVersion"
    provided "com.squareup.dagger:dagger-compiler:$daggerVersion"

    // Picasso, A powerful image downloading and caching library
    compile "com.squareup.picasso:picasso:$picassoVersion"

    // Android Annotations
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"

    // Project Lombok
    compile "org.projectlombok:lombok:$lombokVersion"

    // Google Analytics
    compile "com.google.android.gms:play-services-analytics:$googleAnalyticsVersion"

    // Autoparcel-Gson. Gson for parcel
    compile "me.tatarka:auto-parcel-gson:$autoParcelVersion"
    apt "me.tatarka:auto-parcel-gson-processor:$autoParcelVersion"
}


apply from: "${rootProject.getRootDir()}/robolectric.gradle"
apply from: "${rootProject.getRootDir()}/jacoco.gradle"
apply plugin: "com.google.gms.google-services"